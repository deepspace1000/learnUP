name: deploy

on:
  workflow_call:
    inputs:
      TARGET:
        required: true
        type: string

env:
  TARGET_BRANCH: master
  TARGET_URL: https://testing.learntrack.ch/info

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Generate tag
        id: tag
        run: echo "TAG=sha-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set target branch to staging
        if: github.event.inputs.TARGET == 'staging'
        run: |
          echo "TARGET_BRANCH=staging" >> $GITHUB_ENV

      - name: Create version file
        uses: finnp/create-file-action@master
        env:
          FILE_NAME: 'version'
          FILE_DATA: 'LEARNTRACK_TAG=${{ steps.tag.outputs.TAG }}'

      - name: Push version file
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.LEARNTRACK_VERSION_BUMP }}
        with:
          source_file: 'version'
          destination_repo: 'learn-track/learnTrack-Deployment'
          destination_branch: ${{ env.TARGET_BRANCH }}
          user_email: 'nilsrothe05@icloud.com'
          user_name: 'deepspace1000'
          commit_message: 'Update learnTrack docker image version to the latest tag: ${{ steps.tag.outputs.TAG }}'

  check_environment:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - deploy
    steps:
      - name: Set target url to staging
        if: github.event.inputs.TARGET == 'staging'
        run: |
          echo "TARGET_URL=https://staging.learntrack.ch/info" >> $GITHUB_ENV

      - name: Sleep for a minute to wait for deployment
        run: sleep 60s
        shell: bash

      - uses: nick-fields/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 10
          retry_wait_seconds: 20
          command: |
            set -e
            SHA_SHORT="${{ needs.check.outputs.sha_short }}"
            ACTUAL_SHA_SHORT=$(curl -v --no-include ${{ env.TARGET_URL }} | jq -r .git.commit.id)
            echo "Waiting for $SHA_SHORT to be deployed. Currently: $ACTUAL_SHA_SHORT"
            if [ "$ACTUAL_SHA_SHORT" = "$SHA_SHORT" ]; then
              exit 0
            else
              exit 1
            fi;    
