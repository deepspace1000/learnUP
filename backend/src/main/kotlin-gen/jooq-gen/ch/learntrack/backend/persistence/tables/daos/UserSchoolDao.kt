/*
 * This file is generated by jOOQ.
 */
package ch.learntrack.backend.persistence.tables.daos


import ch.learntrack.backend.persistence.tables.UserSchoolTable
import ch.learntrack.backend.persistence.tables.pojos.UserSchool
import ch.learntrack.backend.persistence.tables.records.UserSchoolRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.Record2
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
public open class UserSchoolDao(configuration: Configuration?) : DAOImpl<UserSchoolRecord, UserSchool, Record2<UUID?, UUID?>>(UserSchoolTable.USER_SCHOOL, UserSchool::class.java, configuration) {

    /**
     * Create a new UserSchoolDao without any configuration
     */
    public constructor(): this(null)

    public override fun getId(o: UserSchool): Record2<UUID?, UUID?> = compositeKeyRecord(o.userId, o.schoolId)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfUserId(lowerInclusive: UUID, upperInclusive: UUID): List<UserSchool> = fetchRange(UserSchoolTable.USER_SCHOOL.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public fun fetchByUserId(vararg values: UUID): List<UserSchool> = fetch(UserSchoolTable.USER_SCHOOL.USER_ID, *values)

    /**
     * Fetch records that have <code>school_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfSchoolId(lowerInclusive: UUID, upperInclusive: UUID): List<UserSchool> = fetchRange(UserSchoolTable.USER_SCHOOL.SCHOOL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>school_id IN (values)</code>
     */
    public fun fetchBySchoolId(vararg values: UUID): List<UserSchool> = fetch(UserSchoolTable.USER_SCHOOL.SCHOOL_ID, *values)
}
