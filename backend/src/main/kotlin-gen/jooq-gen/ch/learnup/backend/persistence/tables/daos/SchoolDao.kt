/*
 * This file is generated by jOOQ.
 */
package ch.learnup.backend.persistence.tables.daos


import ch.learnup.backend.persistence.tables.SchoolTable
import ch.learnup.backend.persistence.tables.pojos.School
import ch.learnup.backend.persistence.tables.records.SchoolRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
public open class SchoolDao(configuration: Configuration?) : DAOImpl<SchoolRecord, School, UUID>(SchoolTable.SCHOOL, School::class.java, configuration) {

    /**
     * Create a new SchoolDao without any configuration
     */
    public constructor(): this(null)

    public override fun getId(o: School): UUID = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfId(lowerInclusive: UUID, upperInclusive: UUID): List<School> = fetchRange(SchoolTable.SCHOOL.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public fun fetchById(vararg values: UUID): List<School> = fetch(SchoolTable.SCHOOL.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public fun fetchOneById(value: UUID): School? = fetchOne(SchoolTable.SCHOOL.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<School> = fetchRange(SchoolTable.SCHOOL.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public fun fetchByName(vararg values: String): List<School> = fetch(SchoolTable.SCHOOL.NAME, *values)

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfAddress(lowerInclusive: String, upperInclusive: String): List<School> = fetchRange(SchoolTable.SCHOOL.ADDRESS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public fun fetchByAddress(vararg values: String): List<School> = fetch(SchoolTable.SCHOOL.ADDRESS, *values)

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfCity(lowerInclusive: String, upperInclusive: String): List<School> = fetchRange(SchoolTable.SCHOOL.CITY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public fun fetchByCity(vararg values: String): List<School> = fetch(SchoolTable.SCHOOL.CITY, *values)

    /**
     * Fetch records that have <code>postcode BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfPostcode(lowerInclusive: Int, upperInclusive: Int): List<School> = fetchRange(SchoolTable.SCHOOL.POSTCODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>postcode IN (values)</code>
     */
    public fun fetchByPostcode(vararg values: Int): List<School> = fetch(SchoolTable.SCHOOL.POSTCODE, *values.toTypedArray())

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfCreated(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<School> = fetchRange(SchoolTable.SCHOOL.CREATED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public fun fetchByCreated(vararg values: LocalDateTime): List<School> = fetch(SchoolTable.SCHOOL.CREATED, *values)

    /**
     * Fetch records that have <code>updated BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfUpdated(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<School> = fetchRange(SchoolTable.SCHOOL.UPDATED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public fun fetchByUpdated(vararg values: LocalDateTime): List<School> = fetch(SchoolTable.SCHOOL.UPDATED, *values)
}
