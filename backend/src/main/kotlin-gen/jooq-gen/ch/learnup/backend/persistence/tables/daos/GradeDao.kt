/*
 * This file is generated by jOOQ.
 */
package ch.learnup.backend.persistence.tables.daos


import ch.learnup.backend.persistence.tables.GradeTable
import ch.learnup.backend.persistence.tables.pojos.Grade
import ch.learnup.backend.persistence.tables.records.GradeRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
public open class GradeDao(configuration: Configuration?) : DAOImpl<GradeRecord, Grade, UUID>(GradeTable.GRADE, Grade::class.java, configuration) {

    /**
     * Create a new GradeDao without any configuration
     */
    public constructor(): this(null)

    public override fun getId(o: Grade): UUID = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfId(lowerInclusive: UUID, upperInclusive: UUID): List<Grade> = fetchRange(GradeTable.GRADE.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public fun fetchById(vararg values: UUID): List<Grade> = fetch(GradeTable.GRADE.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public fun fetchOneById(value: UUID): Grade? = fetchOne(GradeTable.GRADE.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<Grade> = fetchRange(GradeTable.GRADE.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public fun fetchByName(vararg values: String): List<Grade> = fetch(GradeTable.GRADE.NAME, *values)

    /**
     * Fetch records that have <code>school_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfSchoolId(lowerInclusive: UUID, upperInclusive: UUID): List<Grade> = fetchRange(GradeTable.GRADE.SCHOOL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>school_id IN (values)</code>
     */
    public fun fetchBySchoolId(vararg values: UUID): List<Grade> = fetch(GradeTable.GRADE.SCHOOL_ID, *values)

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfCreated(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Grade> = fetchRange(GradeTable.GRADE.CREATED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public fun fetchByCreated(vararg values: LocalDateTime): List<Grade> = fetch(GradeTable.GRADE.CREATED, *values)

    /**
     * Fetch records that have <code>updated BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public fun fetchRangeOfUpdated(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Grade> = fetchRange(GradeTable.GRADE.UPDATED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public fun fetchByUpdated(vararg values: LocalDateTime): List<Grade> = fetch(GradeTable.GRADE.UPDATED, *values)
}
