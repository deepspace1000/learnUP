/*
 * This file is generated by jOOQ.
 */
package ch.learnup.backend.persistence.tables.records


import ch.learnup.backend.persistence.tables.SchoolTable
import ch.learnup.backend.persistence.tables.pojos.School

import java.time.LocalDateTime
import java.util.UUID

import org.jetbrains.annotations.NotNull
import org.jetbrains.annotations.Nullable
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SchoolRecord private constructor() : UpdatableRecordImpl<SchoolRecord>(SchoolTable.SCHOOL) {

    open var id: UUID
        set(value): Unit = set(0, value)
    @NotNull
        get(): UUID = get(0) as UUID

    open var name: String
        set(value): Unit = set(1, value)
    @NotNull
        get(): String = get(1) as String

    open var address: String
        set(value): Unit = set(2, value)
    @NotNull
        get(): String = get(2) as String

    open var city: String
        set(value): Unit = set(3, value)
    @NotNull
        get(): String = get(3) as String

    open var postcode: Int
        set(value): Unit = set(4, value)
    @NotNull
        get(): Int = get(4) as Int

    open var created: LocalDateTime?
        set(value): Unit = set(5, value)
    @Nullable
        get(): LocalDateTime? = get(5) as LocalDateTime?

    open var updated: LocalDateTime?
        set(value): Unit = set(6, value)
    @Nullable
        get(): LocalDateTime? = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised SchoolRecord
     */
    constructor(id: UUID, name: String, address: String, city: String, postcode: Int, created: LocalDateTime? = null, updated: LocalDateTime? = null): this() {
        this.id = id
        this.name = name
        this.address = address
        this.city = city
        this.postcode = postcode
        this.created = created
        this.updated = updated
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised SchoolRecord
     */
    constructor(value: School?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.address = value.address
            this.city = value.city
            this.postcode = value.postcode
            this.created = value.created
            this.updated = value.updated
            resetChangedOnNotNull()
        }
    }
}
