/*
 * This file is generated by jOOQ.
 */
package ch.learnup.backend.persistence.tables


import ch.learnup.backend.persistence.Public
import ch.learnup.backend.persistence.keys.PK_SCHOOL
import ch.learnup.backend.persistence.keys.T_GRADE__FK_GRADE_SCHOOL
import ch.learnup.backend.persistence.keys.T_USER_SCHOOL__FK_USER_SCHOOL_SCHOOL
import ch.learnup.backend.persistence.tables.GradeTable.TGradePath
import ch.learnup.backend.persistence.tables.UserSchoolTable.TUserSchoolPath
import ch.learnup.backend.persistence.tables.UserTable.TUserPath
import ch.learnup.backend.persistence.tables.records.SchoolRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SchoolTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SchoolRecord>?,
    parentPath: InverseForeignKey<out Record, SchoolRecord>?,
    aliased: Table<SchoolRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SchoolRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.t_school</code>
         */
        val SCHOOL: SchoolTable = SchoolTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SchoolRecord> = SchoolRecord::class.java

    /**
     * The column <code>public.t_school.id</code>.
     */
    val ID: TableField<SchoolRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.t_school.name</code>.
     */
    val NAME: TableField<SchoolRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.t_school.address</code>.
     */
    val ADDRESS: TableField<SchoolRecord, String?> = createField(DSL.name("address"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.t_school.city</code>.
     */
    val CITY: TableField<SchoolRecord, String?> = createField(DSL.name("city"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.t_school.postcode</code>.
     */
    val POSTCODE: TableField<SchoolRecord, Int?> = createField(DSL.name("postcode"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.t_school.created</code>.
     */
    val CREATED: TableField<SchoolRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.t_school.updated</code>.
     */
    val UPDATED: TableField<SchoolRecord, LocalDateTime?> = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<SchoolRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SchoolRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SchoolRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.t_school</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.t_school</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.t_school</code> table reference
     */
    constructor(): this(DSL.name("t_school"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SchoolRecord>?, parentPath: InverseForeignKey<out Record, SchoolRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, SCHOOL, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TSchoolPath : SchoolTable, Path<SchoolRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SchoolRecord>?, parentPath: InverseForeignKey<out Record, SchoolRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<SchoolRecord>): super(alias, aliased)
        override fun `as`(alias: String): TSchoolPath = TSchoolPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TSchoolPath = TSchoolPath(alias, this)
        override fun `as`(alias: Table<*>): TSchoolPath = TSchoolPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<SchoolRecord> = PK_SCHOOL

    private lateinit var _tGrade: TGradePath

    /**
     * Get the implicit to-many join path to the <code>public.t_grade</code>
     * table
     */
    fun tGrade(): TGradePath {
        if (!this::_tGrade.isInitialized)
            _tGrade = TGradePath(this, null, T_GRADE__FK_GRADE_SCHOOL.inverseKey)

        return _tGrade;
    }

    val tGrade: TGradePath
        get(): TGradePath = tGrade()

    private lateinit var _tUserSchool: TUserSchoolPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.t_user_school</code> table
     */
    fun tUserSchool(): TUserSchoolPath {
        if (!this::_tUserSchool.isInitialized)
            _tUserSchool = TUserSchoolPath(this, null, T_USER_SCHOOL__FK_USER_SCHOOL_SCHOOL.inverseKey)

        return _tUserSchool;
    }

    val tUserSchool: TUserSchoolPath
        get(): TUserSchoolPath = tUserSchool()

    /**
     * Get the implicit many-to-many join path to the <code>public.t_user</code>
     * table
     */
    val tUser: TUserPath
        get(): TUserPath = tUserSchool().tUser()
    override fun `as`(alias: String): SchoolTable = SchoolTable(DSL.name(alias), this)
    override fun `as`(alias: Name): SchoolTable = SchoolTable(alias, this)
    override fun `as`(alias: Table<*>): SchoolTable = SchoolTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SchoolTable = SchoolTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SchoolTable = SchoolTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SchoolTable = SchoolTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): SchoolTable = SchoolTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): SchoolTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): SchoolTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): SchoolTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): SchoolTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): SchoolTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): SchoolTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): SchoolTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): SchoolTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): SchoolTable = where(DSL.notExists(select))
}
