/*
 * This file is generated by jOOQ.
 */
package ch.learnup.backend.persistence.tables


import ch.learnup.backend.persistence.Public
import ch.learnup.backend.persistence.keys.PK_GRADE
import ch.learnup.backend.persistence.keys.T_GRADE__FK_GRADE_SCHOOL
import ch.learnup.backend.persistence.keys.T_SUBJECT__FK_SUBJECT_GRADE
import ch.learnup.backend.persistence.keys.T_USER_GRADE__FK_USER_GRADE_GRADE
import ch.learnup.backend.persistence.tables.SchoolTable.TSchoolPath
import ch.learnup.backend.persistence.tables.SubjectTable.TSubjectPath
import ch.learnup.backend.persistence.tables.UserGradeTable.TUserGradePath
import ch.learnup.backend.persistence.tables.UserTable.TUserPath
import ch.learnup.backend.persistence.tables.records.GradeRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
public open class GradeTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, GradeRecord>?,
    parentPath: InverseForeignKey<out Record, GradeRecord>?,
    aliased: Table<GradeRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<GradeRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    public companion object {

        /**
         * The reference instance of <code>public.t_grade</code>
         */
        public val GRADE: GradeTable = GradeTable()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<GradeRecord> = GradeRecord::class.java

    /**
     * The column <code>public.t_grade.id</code>.
     */
    public val ID: TableField<GradeRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.t_grade.name</code>.
     */
    public val NAME: TableField<GradeRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.t_grade.school_id</code>.
     */
    public val SCHOOL_ID: TableField<GradeRecord, UUID?> = createField(DSL.name("school_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.t_grade.created</code>.
     */
    public val CREATED: TableField<GradeRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.t_grade.updated</code>.
     */
    public val UPDATED: TableField<GradeRecord, LocalDateTime?> = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6), this, "")

    private constructor(alias: Name, aliased: Table<GradeRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<GradeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<GradeRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.t_grade</code> table reference
     */
    public constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.t_grade</code> table reference
     */
    public constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.t_grade</code> table reference
     */
    public constructor(): this(DSL.name("t_grade"), null)

    public constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GradeRecord>?, parentPath: InverseForeignKey<out Record, GradeRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, GRADE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public open class TGradePath : GradeTable, Path<GradeRecord> {
        public constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GradeRecord>?, parentPath: InverseForeignKey<out Record, GradeRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<GradeRecord>): super(alias, aliased)
        public override fun `as`(alias: String): TGradePath = TGradePath(DSL.name(alias), this)
        public override fun `as`(alias: Name): TGradePath = TGradePath(alias, this)
        public override fun `as`(alias: Table<*>): TGradePath = TGradePath(alias.qualifiedName, this)
    }
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getPrimaryKey(): UniqueKey<GradeRecord> = PK_GRADE
    public override fun getReferences(): List<ForeignKey<GradeRecord, *>> = listOf(T_GRADE__FK_GRADE_SCHOOL)

    private lateinit var _tSchool: TSchoolPath

    /**
     * Get the implicit join path to the <code>public.t_school</code> table.
     */
    public fun tSchool(): TSchoolPath {
        if (!this::_tSchool.isInitialized)
            _tSchool = TSchoolPath(this, T_GRADE__FK_GRADE_SCHOOL, null)

        return _tSchool;
    }

    public val tSchool: TSchoolPath
        get(): TSchoolPath = tSchool()

    private lateinit var _tSubject: TSubjectPath

    /**
     * Get the implicit to-many join path to the <code>public.t_subject</code>
     * table
     */
    public fun tSubject(): TSubjectPath {
        if (!this::_tSubject.isInitialized)
            _tSubject = TSubjectPath(this, null, T_SUBJECT__FK_SUBJECT_GRADE.inverseKey)

        return _tSubject;
    }

    public val tSubject: TSubjectPath
        get(): TSubjectPath = tSubject()

    private lateinit var _tUserGrade: TUserGradePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.t_user_grade</code> table
     */
    public fun tUserGrade(): TUserGradePath {
        if (!this::_tUserGrade.isInitialized)
            _tUserGrade = TUserGradePath(this, null, T_USER_GRADE__FK_USER_GRADE_GRADE.inverseKey)

        return _tUserGrade;
    }

    public val tUserGrade: TUserGradePath
        get(): TUserGradePath = tUserGrade()

    /**
     * Get the implicit many-to-many join path to the <code>public.t_user</code>
     * table
     */
    public val tUser: TUserPath
        get(): TUserPath = tUserGrade().tUser()
    public override fun `as`(alias: String): GradeTable = GradeTable(DSL.name(alias), this)
    public override fun `as`(alias: Name): GradeTable = GradeTable(alias, this)
    public override fun `as`(alias: Table<*>): GradeTable = GradeTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): GradeTable = GradeTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): GradeTable = GradeTable(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): GradeTable = GradeTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    public override fun where(condition: Condition): GradeTable = GradeTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    public override fun where(conditions: Collection<Condition>): GradeTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    public override fun where(vararg conditions: Condition): GradeTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    public override fun where(condition: Field<Boolean?>): GradeTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL public override fun where(condition: SQL): GradeTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL public override fun where(@Stringly.SQL condition: String): GradeTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL public override fun where(@Stringly.SQL condition: String, vararg binds: Any?): GradeTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL public override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): GradeTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    public override fun whereExists(select: Select<*>): GradeTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    public override fun whereNotExists(select: Select<*>): GradeTable = where(DSL.notExists(select))
}
